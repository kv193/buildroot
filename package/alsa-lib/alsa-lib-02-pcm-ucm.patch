Index: alsa-lib/src/pcm/pcm_ladspa.c
===================================================================
--- alsa-lib/src/pcm/pcm_ladspa.c	(revision 10341)
+++ alsa-lib/src/pcm/pcm_ladspa.c	(revision 10342)
@@ -34,7 +34,9 @@
   
 #include <dirent.h>
 #include <locale.h>
+#ifndef HAVE_SOFT_FLOAT
 #include <math.h>
+#endif
 #include "pcm_local.h"
 #include "pcm_plugin.h"
 
@@ -513,36 +515,39 @@
                 *val = desc->PortRangeHints[port].LowerBound;
                 break;
         case LADSPA_HINT_DEFAULT_LOW:
-                if (LADSPA_IS_HINT_LOGARITHMIC(hdesc)) {
+#ifndef HAVE_SOFT_FLOAT
+                if (LADSPA_IS_HINT_LOGARITHMIC(hdesc))
                         *val = exp(log(desc->PortRangeHints[port].LowerBound)
                                         * 0.75
                                         + log(desc->PortRangeHints[port].UpperBound)
                                         * 0.25);
-                } else {
+                else
+#endif
                         *val = (desc->PortRangeHints[port].LowerBound * 0.75) +
                                (desc->PortRangeHints[port].UpperBound * 0.25);
-                }
                 break;
         case LADSPA_HINT_DEFAULT_MIDDLE:
-                if (LADSPA_IS_HINT_LOGARITHMIC(hdesc)) {
+#ifndef HAVE_SOFT_FLOAT
+                if (LADSPA_IS_HINT_LOGARITHMIC(hdesc))
                         *val = sqrt(desc->PortRangeHints[port].LowerBound *
                                     desc->PortRangeHints[port].UpperBound);
-                } else {
+                else
+#endif
                         *val = 0.5 *
                                (desc->PortRangeHints[port].LowerBound +
                                 desc->PortRangeHints[port].UpperBound);
-                }
                 break;
         case LADSPA_HINT_DEFAULT_HIGH:
-                if (LADSPA_IS_HINT_LOGARITHMIC(hdesc)) {
+#ifndef HAVE_SOFT_FLOAT
+                if (LADSPA_IS_HINT_LOGARITHMIC(hdesc))
                         *val = exp(log(desc->PortRangeHints[port].LowerBound)
                                         * 0.25
                                         + log(desc->PortRangeHints[port].UpperBound)
                                         * 0.75);
-                } else {
+                else
+#endif
                         *val = (desc->PortRangeHints[port].LowerBound * 0.25) +
                                (desc->PortRangeHints[port].UpperBound * 0.75);
-                }
                 break;
         case LADSPA_HINT_DEFAULT_MAXIMUM:
                 *val = desc->PortRangeHints[port].UpperBound;
Index: alsa-lib/src/pcm/pcm_direct.c
===================================================================
--- alsa-lib/src/pcm/pcm_direct.c	(revision 10341)
+++ alsa-lib/src/pcm/pcm_direct.c	(revision 10342)
@@ -424,13 +424,21 @@
 		close(dmix->server_fd);
 		return ret;
 	}
-	
+
+#ifdef __NOMMU__
+	ret = vfork();
+#else
 	ret = fork();
+#endif
 	if (ret < 0) {
 		close(dmix->server_fd);
 		return ret;
 	} else if (ret == 0) {
+#ifdef __NOMMU__
+		ret = vfork();
+#else
 		ret = fork();
+#endif
 		if (ret == 0)
 			server_job(dmix);
 		_exit(EXIT_SUCCESS);
