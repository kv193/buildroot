diff -urN lmbench-3.0-a9.bak/src/bench.h lmbench-3.0-a9/src/bench.h
--- lmbench-3.0-a9.bak/src/bench.h	2012-02-06 17:28:31.126045548 +0800
+++ lmbench-3.0-a9/src/bench.h	2012-02-06 17:43:02.542048527 +0800
@@ -94,6 +94,10 @@
 #include	"lib_udp.h"
 #include	"lib_unix.h"
 
+#ifdef __NOMMU__
+#include <sched.h>
+#define STACK_SIZE 4096
+#endif
 
 #ifdef	DEBUG
 #	define		debug(x) fprintf x
diff -urN lmbench-3.0-a9.bak/src/bw_pipe.c lmbench-3.0-a9/src/bw_pipe.c
--- lmbench-3.0-a9.bak/src/bw_pipe.c	2012-02-06 17:28:31.126045548 +0800
+++ lmbench-3.0-a9/src/bw_pipe.c	2012-02-06 17:46:21.074045822 +0800
@@ -29,6 +29,32 @@
 	int	readfd;
 };
 
+#ifdef __NOMMU__
+struct bw_pipe_thread_data {
+	char		stack[STACK_SIZE];
+	int		pipes[2];
+	struct _state*	state;
+};
+
+static struct bw_pipe_thread_data thda;
+
+int
+bw_pipe_thread_function(void *t)
+{
+	struct bw_pipe_thread_data *pthd = (struct bw_pipe_thread_data *)t;
+	close(pthd->pipes[0]);
+	handle_scheduler(benchmp_childid(), 1, 1);
+	pthd->state->buf = valloc(pthd->state->xfer);
+	if (pthd->state->buf == NULL) {
+		perror("child: no memory");
+		return 2;
+	}
+	touch(pthd->state->buf, pthd->state->xfer);
+	writer(pthd->pipes[1], pthd->state->buf, pthd->state->xfer);
+	return 0;
+}
+#endif
+
 void
 initialize(iter_t iterations, void *cookie)
 {
@@ -42,6 +68,12 @@
 		exit(1);
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	thda.pipes[0] = pipes[0];
+	thda.pipes[1] = pipes[1];
+	thda.state = state;
+	state->pid = clone(bw_pipe_thread_function, thda.stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, &thda);
+#else
 	switch (state->pid = fork()) {
 	    case 0:
 		close(pipes[0]);
@@ -64,6 +96,7 @@
 	    default:
 		break;
 	}
+#endif
 	close(pipes[1]);
 	state->readfd = pipes[0];
 	state->buf = valloc(state->xfer + getpagesize());
diff -urN lmbench-3.0-a9.bak/src/bw_tcp.c lmbench-3.0-a9/src/bw_tcp.c
--- lmbench-3.0-a9.bak/src/bw_tcp.c	2012-02-06 17:28:31.042046517 +0800
+++ lmbench-3.0-a9/src/bw_tcp.c	2012-02-06 17:43:02.542048527 +0800
@@ -51,9 +51,13 @@
 	while (( c = getopt(ac, av, "sS:m:M:P:W:N:")) != EOF) {
 		switch(c) {
 		case 's': /* Server */
+#ifdef __NOMMU__
+			server_main();
+#else
 			if (fork() == 0) {
 				server_main();
 			}
+#endif
 			exit(0);
 			break;
 		case 'S': /* shutdown serverhost */
@@ -190,13 +194,21 @@
 	signal(SIGCHLD, sigchld_wait_handler);
 	for ( ;; ) {
 		newdata = tcp_accept(data, SOCKOPT_WRITE);
+#ifdef __NOMMU__
+		switch (vfork()) {
+#else
 		switch (fork()) {
+#endif
 		    case -1:
 			perror("fork");
 			break;
 		    case 0:
 			source(newdata);
+#ifdef __NOMMU__
+			_exit(0);
+#else
 			exit(0);
+#endif
 		    default:
 			close(newdata);
 			break;
diff -urN lmbench-3.0-a9.bak/src/bw_udp.c lmbench-3.0-a9/src/bw_udp.c
--- lmbench-3.0-a9.bak/src/bw_udp.c	2012-02-06 17:28:31.130046291 +0800
+++ lmbench-3.0-a9/src/bw_udp.c	2012-02-06 17:43:02.542048527 +0800
@@ -54,9 +54,16 @@
 	while (( c = getopt(ac, av, "sS:m:W:N:")) != EOF) {
 		switch(c) {
 		case 's': /* Server */
+#ifdef __NOMMU__
+			if (vfork() == 0) {
+				server_main();
+				_exit(0);
+			}
+#else
 			if (fork() == 0) {
 				server_main();
 			}
+#endif
 			exit(0);
 		case 'S': /* shutdown serverhost */
 		{
diff -urN lmbench-3.0-a9.bak/src/bw_unix.c lmbench-3.0-a9/src/bw_unix.c
--- lmbench-3.0-a9.bak/src/bw_unix.c	2012-02-06 17:28:31.126045548 +0800
+++ lmbench-3.0-a9/src/bw_unix.c	2012-02-06 17:43:02.542048527 +0800
@@ -31,6 +31,21 @@
 	int	initerr;
 };
 
+#ifdef __NOMMU__
+static char	thd_stack[STACK_SIZE];
+
+int
+bw_unix_thread_function(void *t)
+{
+	struct _state*	state = (struct _state*)t;
+	handle_scheduler(benchmp_childid(), 1, 1);
+	close(state->control[1]);
+	close(state->pipes[0]);
+	writer(state->control[0], state->pipes[1], state->buf, state);
+	return 0;
+}
+#endif
+
 void 
 initialize(iter_t iterations, void* cookie)
 {
@@ -52,6 +67,9 @@
 		return;
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	state->pid = clone(bw_unix_thread_function, thd_stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, state);
+#else
 	switch (state->pid = fork()) {
 	    case 0:
 	      handle_scheduler(benchmp_childid(), 1, 1);
@@ -70,6 +88,7 @@
 	    default:
 		break;
 	}
+#endif
 	close(state->control[0]);
 	close(state->pipes[1]);
 }
diff -urN lmbench-3.0-a9.bak/src/lat_cmd.c lmbench-3.0-a9/src/lat_cmd.c
--- lmbench-3.0-a9.bak/src/lat_cmd.c	2012-02-06 17:28:31.090046177 +0800
+++ lmbench-3.0-a9/src/lat_cmd.c	2012-02-06 17:43:02.542048527 +0800
@@ -81,7 +81,19 @@
 		state->pid = 0;
 	}
 }
-	
+
+#ifdef __NOMMU__
+static char	thd_stack[STACK_SIZE];
+
+int
+cmd_thread_function(void *t)
+{
+	state_t *state = (state_t *)t;
+	execvp(state->argv[0], state->argv);
+	return 0;
+}
+#endif
+
 void 
 bench(register iter_t iterations, void *cookie)
 {
@@ -89,6 +101,9 @@
 
 	signal(SIGCHLD, SIG_DFL);
 	while (iterations-- > 0) {
+#ifdef __NOMMU__
+		state->pid = clone(cmd_thread_function, thd_stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, state);
+#else
 		switch (state->pid = fork()) {
 		case '0':
 			execvp(state->argv[0], state->argv);
@@ -96,6 +111,7 @@
 		default:
 			break;
 		}
+#endif
 		waitpid(state->pid, NULL, 0);
 		state->pid = 0;
 	}
diff -urN lmbench-3.0-a9.bak/src/lat_connect.c lmbench-3.0-a9/src/lat_connect.c
--- lmbench-3.0-a9.bak/src/lat_connect.c	2012-02-06 17:28:31.110045898 +0800
+++ lmbench-3.0-a9/src/lat_connect.c	2012-02-06 17:43:02.542048527 +0800
@@ -43,9 +43,13 @@
 	while (( c = getopt(ac, av, "sSP:W:N:")) != EOF) {
 		switch(c) {
 		case 's': /* Server */
+#ifdef __NOMMU__
+			server_main();
+#else
 			if (fork() == 0) {
 				server_main();
 			}
+#endif
 			exit(0);
 		case 'S': /* shutdown serverhost */
 		{
diff -urN lmbench-3.0-a9.bak/src/lat_ctx.c lmbench-3.0-a9/src/lat_ctx.c
--- lmbench-3.0-a9.bak/src/lat_ctx.c	2012-02-06 17:28:31.106045340 +0800
+++ lmbench-3.0-a9/src/lat_ctx.c	2012-02-06 17:43:02.542048527 +0800
@@ -220,6 +220,36 @@
 	}
 }
 
+#ifdef __NOMMU__
+struct ctx_thread_data {
+	char		stack[STACK_SIZE];
+	int		**p;
+	int		process_size;
+	long		i;
+	int		procs;
+};
+
+static struct ctx_thread_data *pcthda = NULL;
+
+int
+ctx_thread_function(void *t)
+{
+	struct ctx_thread_data *pthd;
+	int j;
+	if(t == NULL)
+		return -1;
+	pthd = (struct ctx_thread_data *)t;
+
+	handle_scheduler(benchmp_childid(), pthd->i, pthd->procs-1);
+	for (j = 0; j < pthd->procs; ++j) {
+		if (j != pthd->i - 1) close(pthd->p[j][0]);
+		if (j != pthd->i) close(pthd->p[j][1]);
+	}
+	doit(pthd->p[pthd->i-1][0], pthd->p[pthd->i][1], pthd->process_size);
+	return 0;
+}
+#endif
+
 void
 cleanup(iter_t iterations, void* cookie)
 {
@@ -240,6 +270,9 @@
 	}
 	if (pState->pids)
 		free(pState->pids);
+#ifdef __NOMMU__
+	if (pcthda) free(pcthda);
+#endif
 	pState->pids = NULL;
 }
 
@@ -297,12 +330,17 @@
 	exit(1);
 }
 
-
 int
 create_daemons(int **p, pid_t *pids, int procs, int process_size)
 {
 	int	i, j;
 	int	msg;
+#ifdef __NOMMU__
+	pcthda = NULL;
+	pcthda = (struct ctx_thread_data *)malloc(procs * sizeof(struct ctx_thread_data));
+	if (!pcthda) 
+		return -1;
+#endif
 
 	/*
 	 * Use the pipes as a ring, and fork off a bunch of processes
@@ -312,6 +350,15 @@
 	 */
 	handle_scheduler(benchmp_childid(), 0, procs-1);
      	for (i = 1; i < procs; ++i) {
+#ifdef __NOMMU__
+		pcthda[i].p = p;
+		pcthda[i].process_size = process_size;
+		pcthda[i].procs = procs;
+		pcthda[i].i = i;
+		pids[i] = clone(ctx_thread_function, pcthda[i].stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, &(pcthda[i]));
+		if(pids[i]<0)
+			free(pcthda);
+#else
 		switch (pids[i] = fork()) {
 		    case -1:	/* could not fork, out of processes? */
 			return i;
@@ -328,6 +375,7 @@
 		    default:	/* parent */
 			;
 	    	}
+#endif
 	}
 
 	/*
@@ -337,6 +385,9 @@
 	if (write(p[0][1], &msg, sizeof(msg)) != sizeof(msg) ||
 	    read(p[procs-1][0], &msg, sizeof(msg)) != sizeof(msg)) {
 		/* perror("write/read/write on pipe"); */
+#ifdef __NOMMU__
+		if (pcthda) free(pcthda);
+#endif
 		exit(1);
 	}
 	return procs;
diff -urN lmbench-3.0-a9.bak/src/lat_fcntl.c lmbench-3.0-a9/src/lat_fcntl.c
--- lmbench-3.0-a9.bak/src/lat_fcntl.c	2012-02-06 17:28:31.106045340 +0800
+++ lmbench-3.0-a9/src/lat_fcntl.c	2012-02-06 17:43:02.542048527 +0800
@@ -94,6 +94,21 @@
 	}
 }
 
+#ifdef __NOMMU__
+static char	thd_stack[STACK_SIZE];
+
+int
+fcntl_thread_function(void *t)
+{
+	struct _state*	state = (struct _state*)t;
+	handle_scheduler(benchmp_childid(), 1, 1);
+	for ( ;; ) {
+		procB(state);
+	}
+	return 0;
+}
+#endif
+
 void 
 initialize(iter_t iterations, void* cookie)
 {
@@ -137,6 +152,9 @@
 		exit(1);
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	state->pid = clone(fcntl_thread_function, thd_stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, state);
+#else
 	switch (state->pid = fork()) {
 	case -1:
 		perror("fork");
@@ -149,6 +167,7 @@
 	default:
 		break;
 	}
+#endif
 }
 
 void
diff -urN lmbench-3.0-a9.bak/src/lat_fifo.c lmbench-3.0-a9/src/lat_fifo.c
--- lmbench-3.0-a9.bak/src/lat_fifo.c	2012-02-06 17:28:31.106045340 +0800
+++ lmbench-3.0-a9/src/lat_fifo.c	2012-02-06 17:43:02.542048527 +0800
@@ -67,6 +67,21 @@
 	return (0);
 }
 
+#ifdef __NOMMU__
+static char	thd_stack[STACK_SIZE];
+
+int
+fifo_thread_function(void *t)
+{
+	struct _state*	state = (struct _state*)t;
+	handle_scheduler(benchmp_childid(), 1, 1);
+	state->rd = open(state->filename1, O_RDONLY);
+	state->wr = open(state->filename2, O_WRONLY);
+	writer(state->wr, state->rd);
+	return 0;
+}
+#endif
+
 void 
 initialize(iter_t iterations, void *cookie)
 {
@@ -86,6 +101,9 @@
 		exit(1);
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	state->pid = clone(fifo_thread_function, thd_stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, state);
+#else
 	switch (state->pid = fork()) {
 	    case 0:
 		handle_scheduler(benchmp_childid(), 1, 1);
@@ -103,6 +121,7 @@
 		state->rd = open(state->filename2, O_RDONLY);
 		break;
 	}
+#endif
 
 	/*
 	 * One time around to make sure both processes are started.
diff -urN lmbench-3.0-a9.bak/src/lat_pipe.c lmbench-3.0-a9/src/lat_pipe.c
--- lmbench-3.0-a9.bak/src/lat_pipe.c	2012-02-06 17:28:31.110045898 +0800
+++ lmbench-3.0-a9/src/lat_pipe.c	2012-02-06 17:43:02.542048527 +0800
@@ -63,6 +63,22 @@
 	return (0);
 }
 
+#ifdef __NOMMU__
+static char	thd_stack[STACK_SIZE];
+
+int
+pipe_thread_function(void *t)
+{
+	struct _state*	state = (struct _state*)t;
+	handle_scheduler(benchmp_childid(), 1, 1);
+	signal(SIGTERM, exit);
+	close(state->p1[1]);
+	close(state->p2[0]);
+	writer(state->p2[1], state->p1[0]);
+	return 0;
+}
+#endif
+
 void 
 initialize(iter_t iterations, void* cookie)
 {
@@ -80,6 +96,9 @@
 		exit(1);
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	state->pid = clone(pipe_thread_function, thd_stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, state);
+#else
 	switch (state->pid = fork()) {
 	    case 0:
 		handle_scheduler(benchmp_childid(), 1, 1);
@@ -98,6 +117,7 @@
 		close(state->p2[1]);
 		break;
 	}
+#endif
 
 	/*
 	 * One time around to make sure both processes are started.
diff -urN lmbench-3.0-a9.bak/src/lat_pmake.c lmbench-3.0-a9/src/lat_pmake.c
--- lmbench-3.0-a9.bak/src/lat_pmake.c	2012-02-06 17:28:31.118046011 +0800
+++ lmbench-3.0-a9/src/lat_pmake.c	2012-02-06 17:43:02.542048527 +0800
@@ -118,10 +118,18 @@
 	 */
 	while (iterations-- > 0) {
 		for (i = 0; i < state->jobs; ++i) {
+#ifdef __NOMMU__
+			if ((state->pids[i] = vfork()) == 0) {
+#else
 			if ((state->pids[i] = fork()) == 0) {
+#endif
 				handle_scheduler(benchmp_childid(), i+1, state->jobs);
 				work(state->iterations, state);
+#ifdef __NOMMU__
+				_exit(0);
+#else
 				exit(0);
+#endif
 			}
 		}
 		for (i = 0; i < state->jobs; ++i) {
diff -urN lmbench-3.0-a9.bak/src/lat_proc.c lmbench-3.0-a9/src/lat_proc.c
--- lmbench-3.0-a9.bak/src/lat_proc.c	2012-02-06 17:28:31.126045548 +0800
+++ lmbench-3.0-a9/src/lat_proc.c	2012-02-06 17:43:02.542048527 +0800
@@ -103,7 +103,11 @@
 	signal(SIGCHLD, SIG_DFL);
 	handle_scheduler(benchmp_childid(), 0, 1);
 	while (iterations-- > 0) {
+#ifdef __NOMMU__
+		switch (child_pid = vfork()) {
+#else
 		switch (child_pid = fork()) {
+#endif
 		case -1:
 			perror("fork");
 			exit(1);
@@ -112,7 +116,11 @@
 			handle_scheduler(benchmp_childid(), 1, 1);
 			close(1);
 			execlp("/bin/sh", "sh", "-c", PROG, 0);
+#ifdef __NOMMU__
+			_exit(1);
+#else
 			exit(1);
+#endif
 
 		default:
 			waitpid(child_pid, NULL,0);
@@ -131,7 +139,11 @@
 	while (iterations-- > 0) {
 		nav[0] = PROG;
 		nav[1] = 0;
+#ifdef __NOMMU__
+		switch (child_pid = vfork()) {
+#else
 		switch (child_pid = fork()) {
+#endif
 		case -1:
 			perror("fork");
 			exit(1);
@@ -140,7 +152,11 @@
 			handle_scheduler(benchmp_childid(), 1, 1);
 			close(1);
 			execve(PROG, nav, 0);
+#ifdef __NOMMU__
+			_exit(1);
+#else
 			exit(1);
+#endif
 
 		default:
 			waitpid(child_pid, NULL,0);
@@ -155,14 +171,22 @@
 	signal(SIGCHLD, SIG_DFL);
 	handle_scheduler(benchmp_childid(), 0, 1);
 	while (iterations-- > 0) {
+#ifdef __NOMMU__
+		switch (child_pid = vfork()) {
+#else
 		switch (child_pid = fork()) {
+#endif
 		case -1:
 			perror("fork");
 			exit(1);
 	
 		case 0:	/* child */
 			handle_scheduler(benchmp_childid(), 1, 1);
+#ifdef __NOMMU__
+			_exit(1);
+#else
 			exit(1);
+#endif
 	
 		default:
 			waitpid(child_pid, NULL,0);
diff -urN lmbench-3.0-a9.bak/src/lat_rpc.c lmbench-3.0-a9/src/lat_rpc.c
--- lmbench-3.0-a9.bak/src/lat_rpc.c	2012-02-06 17:28:31.126045548 +0800
+++ lmbench-3.0-a9/src/lat_rpc.c	2012-02-06 17:43:02.542048527 +0800
@@ -105,9 +105,13 @@
 	while (( c = getopt(ac, av, "sS:m:p:P:W:N:")) != EOF) {
 		switch(c) {
 		case 's': /* Server */
+#ifdef __NOMMU__
+			server_main();
+#else
 			if (fork() == 0) {
 				server_main();
 			}
+#endif
 			exit(0);
 		case 'S': /* shutdown serverhost */
 		{
diff -urN lmbench-3.0-a9.bak/src/lat_select.c lmbench-3.0-a9/src/lat_select.c
--- lmbench-3.0-a9.bak/src/lat_select.c	2012-02-06 17:28:31.118046011 +0800
+++ lmbench-3.0-a9/src/lat_select.c	2012-02-06 17:43:02.542048527 +0800
@@ -95,6 +95,29 @@
 	exit(0);
 }
 
+#ifdef __NOMMU__
+struct sel_thread_data {
+	char		stack[STACK_SIZE];
+	int		pid;
+	struct _state*	state;
+};
+
+static struct sel_thread_data thda;
+
+int
+sel_thread_function(void *t)
+{
+	struct sel_thread_data	*pthd = (struct sel_thread_data*)t;
+	/* child server process */
+	while (pthd->pid == getppid()) {
+		int newsock = tcp_accept(pthd->state->sock, SOCKOPT_NONE);
+		read(newsock, &(pthd->state->fid), 1);
+		close(newsock);
+	}
+	return 0;
+}
+#endif
+
 void
 server(void* cookie)
 {
@@ -126,6 +149,11 @@
 	}
 
 	/* Start a server process to accept client connections */
+#ifdef __NOMMU__
+	thda.state = state;
+	thda.pid = pid;
+	state->pid = clone(sel_thread_function, thda.stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, &thda);
+#else
 	switch(state->pid = fork()) {
 	case 0:
 		/* child server process */
@@ -142,6 +170,7 @@
 	default:
 		break;
 	}
+#endif
 }
 
 int
diff -urN lmbench-3.0-a9.bak/src/lat_sem.c lmbench-3.0-a9/src/lat_sem.c
--- lmbench-3.0-a9.bak/src/lat_sem.c	2012-02-06 17:28:31.118046011 +0800
+++ lmbench-3.0-a9/src/lat_sem.c	2012-02-06 17:43:02.546045403 +0800
@@ -35,6 +35,10 @@
 	int c;
 	char* usage = "[-P <parallelism>] [-W <warmup>] [-N <repetitions>]\n";
 
+#ifdef __NOMMU__
+	printf("Not supported in NOMMU architecture.\n");
+	return 0;
+#endif
 	while (( c = getopt(ac, av, "P:W:N:")) != EOF) {
 		switch(c) {
 		case 'P':
@@ -77,9 +81,17 @@
 	semctl(state->semid, 1, SETVAL, 0);
 
 	handle_scheduler(benchmp_childid(), 0, 1);
+#ifdef __NOMMU__
+	switch (state->pid = vfork()) {
+#else
 	switch (state->pid = fork()) {
+#endif
 	    case 0:
+#ifdef __NOMMU__
+		signal(SIGTERM, _exit);
+#else
 		signal(SIGTERM, exit);
+#endif
 		handle_scheduler(benchmp_childid(), 1, 1);
 		writer(state->semid);
 		return;
diff -urN lmbench-3.0-a9.bak/src/lat_tcp.c lmbench-3.0-a9/src/lat_tcp.c
--- lmbench-3.0-a9.bak/src/lat_tcp.c	2012-02-06 17:28:31.042046517 +0800
+++ lmbench-3.0-a9/src/lat_tcp.c	2012-02-06 17:43:02.546045403 +0800
@@ -45,9 +45,13 @@
 	while (( c = getopt(ac, av, "sS:m:P:W:N:")) != EOF) {
 		switch(c) {
 		case 's': /* Server */
+#ifdef __NOMMU__
+			server_main();
+#else
 			if (fork() == 0) {
 				server_main();
 			}
+#endif
 			exit(0);
 		case 'S': /* shutdown serverhost */
 			state.sock = tcp_connect(optarg,
@@ -140,13 +144,21 @@
 	sock = tcp_server(TCP_XACT, SOCKOPT_REUSE);
 	for (;;) {
 		newsock = tcp_accept(sock, SOCKOPT_NONE);
+#ifdef __NOMMU__
+		switch (vfork()) {
+#else
 		switch (fork()) {
+#endif
 		    case -1:
 			perror("fork");
 			break;
 		    case 0:
 			doserver(newsock);
+#ifdef __NOMMU__
+			_exit(0);
+#else
 			exit(0);
+#endif
 		    default:
 			close(newsock);
 			break;
diff -urN lmbench-3.0-a9.bak/src/lat_udp.c lmbench-3.0-a9/src/lat_udp.c
--- lmbench-3.0-a9.bak/src/lat_udp.c	2012-02-06 17:28:31.118046011 +0800
+++ lmbench-3.0-a9/src/lat_udp.c	2012-02-06 17:43:02.546045403 +0800
@@ -53,9 +53,13 @@
 	while (( c = getopt(ac, av, "sS:m:P:W:N:")) != EOF) {
 		switch(c) {
 		case 's': /* Server */
+#ifdef __NOMMU__
+			server_main();
+#else
 			if (fork() == 0) {
 				server_main();
 			}
+#endif
 			exit(0);
 		case 'S': /* shutdown serverhost */
 		{
diff -urN lmbench-3.0-a9.bak/src/lat_unix.c lmbench-3.0-a9/src/lat_unix.c
--- lmbench-3.0-a9.bak/src/lat_unix.c	2012-02-06 17:28:31.126045548 +0800
+++ lmbench-3.0-a9/src/lat_unix.c	2012-02-06 17:43:02.546045403 +0800
@@ -67,6 +67,24 @@
 	return(0);
 }
 
+#ifdef __NOMMU__
+static char	thd_stack[STACK_SIZE];
+
+int
+unix_thread_function(void *t)
+{
+	struct _state*	pState = (struct _state*)t;
+	handle_scheduler(benchmp_childid(), 1, 1);
+
+	/* Child sits and ping-pongs packets back to parent */
+	signal(SIGTERM, exit);
+	while (read(pState->sv[0], pState->buf, pState->msize) == pState->msize) {
+		write(pState->sv[0], pState->buf, pState->msize);
+	}
+	return 0;
+}
+#endif
+
 void
 initialize(iter_t iterations, void* cookie)
 {
@@ -85,6 +103,10 @@
 	}
 	handle_scheduler(benchmp_childid(), 0, 1);
 
+#ifdef __NOMMU__
+	pState->pid = clone(unix_thread_function, thd_stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, pState);
+	return;
+#else
 	if (pState->pid = fork())
 		return;
 
@@ -96,6 +118,7 @@
 		write(pState->sv[0], pState->buf, pState->msize);
 	}
 	exit(0);
+#endif
 }
 
 void
diff -urN lmbench-3.0-a9.bak/src/lat_unix_connect.c lmbench-3.0-a9/src/lat_unix_connect.c
--- lmbench-3.0-a9.bak/src/lat_unix_connect.c	2012-02-06 17:28:31.118046011 +0800
+++ lmbench-3.0-a9/src/lat_unix_connect.c	2012-02-06 17:43:02.546045403 +0800
@@ -40,9 +40,16 @@
 	/* Start the server "-s" or Shut down the server "-S" */
 	if (ac == 2) {
 		if (!strcmp(av[1], "-s")) {
+#ifdef __NOMMU__
+			if (vfork() == 0) {
+				server_main();
+				_exit(0);
+			}
+#else
 			if (fork() == 0) {
 				server_main();
 			}
+#endif
 			exit(0);
 		}
 		if (!strcmp(av[1], "-S")) {
diff -urN lmbench-3.0-a9.bak/src/lat_usleep.c lmbench-3.0-a9/src/lat_usleep.c
--- lmbench-3.0-a9.bak/src/lat_usleep.c	2012-02-06 17:28:31.086045188 +0800
+++ lmbench-3.0-a9/src/lat_usleep.c	2012-02-06 17:43:02.546045403 +0800
@@ -83,7 +83,7 @@
     }
 }
 
-#ifdef _POSIX_SELECT
+#if defined(_POSIX_SELECT)&&!defined(BFIN)
 void
 bench_pselect(iter_t iterations, void *cookie)
 {
@@ -192,7 +192,7 @@
 	    } else if (strcmp(optarg, "select") == 0) {
 		what = SELECT;
 		mechanism = "select";
-#ifdef _POSIX_SELECT
+#if defined(_POSIX_SELECT)&&!defined(BFIN)
 	    } else if (strcmp(optarg, "pselect") == 0) {
 		what = PSELECT;
 		mechanism = "pselect";
@@ -239,7 +239,7 @@
 	benchmp(NULL, bench_select, NULL, 
 		0, parallel, warmup, repetitions, &state);
 	break;
-#ifdef _POSIX_SELECT
+#if defined(_POSIX_SELECT)&&!defined(BFIN)
     case PSELECT:
 	benchmp(NULL, bench_pselect, NULL, 
 		0, parallel, warmup, repetitions, &state);
diff -urN lmbench-3.0-a9.bak/src/lib_timing.c lmbench-3.0-a9/src/lib_timing.c
--- lmbench-3.0-a9.bak/src/lib_timing.c	2012-02-06 17:28:31.118046011 +0800
+++ lmbench-3.0-a9/src/lib_timing.c	2012-02-06 17:43:02.546045403 +0800
@@ -149,6 +149,55 @@
 int
 sizeof_result(int repetitions);
 
+#ifdef __NOMMU__
+struct thread_data {
+	char		stack[STACK_SIZE];
+	benchmp_f	initialize;
+	benchmp_f	benchmark;
+	benchmp_f	cleanup;
+	long		i;
+	int		response[2];
+	int		start_signal[2];
+	int		result_signal[2];
+	int		exit_signal[2];
+	int		enough;
+	iter_t		iterations;
+	int		parallel;
+	int		repetitions;
+	void*		cookie;
+};
+
+int
+thread_function(void *p)
+{
+	struct thread_data *pthd;
+
+	if(p == NULL)
+		return -1;
+	pthd = (struct thread_data *)p;
+	close(pthd->response[0]);
+	close(pthd->start_signal[1]);
+	close(pthd->result_signal[1]);
+	close(pthd->exit_signal[1]);
+	handle_scheduler(pthd->i, 0, 0);
+	benchmp_child(pthd->initialize, 
+		      pthd->benchmark, 
+		      pthd->cleanup, 
+		      pthd->i,
+		      pthd->response[1], 
+		      pthd->start_signal[0], 
+		      pthd->result_signal[0], 
+		      pthd->exit_signal[0],
+		      pthd->enough,
+		      pthd->iterations,
+		      pthd->parallel,
+		      pthd->repetitions,
+		      pthd->cookie
+		);
+	return 0;
+}
+#endif
+
 void 
 benchmp(benchmp_f initialize, 
 	benchmp_f benchmark,
@@ -167,6 +216,14 @@
 	int		result_signal[2];
 	int		exit_signal[2];
 
+#ifdef __NOMMU__
+	struct thread_data *pthd = NULL;
+
+	pthd = (struct thread_data *)malloc(parallel * sizeof(struct thread_data));
+	if (!pthd) 
+		return;
+#endif
+
 #ifdef _DEBUG
 	fprintf(stderr, "benchmp(%p, %p, %p, %d, %d, %d, %d, %p): entering\n", initialize, benchmark, cleanup, enough, parallel, warmup, repetitions, cookie);
 #endif
@@ -228,6 +285,30 @@
 #ifdef _DEBUG
 		fprintf(stderr, "benchmp(%p, %p, %p, %d, %d, %d, %d, %p): creating child %d\n", initialize, benchmark, cleanup, enough, parallel, warmup, repetitions, cookie, i);
 #endif
+
+#ifdef __NOMMU__
+		pthd[i].initialize = initialize;
+		pthd[i].benchmark = benchmark;
+		pthd[i].cleanup = cleanup;
+		pthd[i].i = i;
+		pthd[i].response[0] = response[0];
+		pthd[i].response[1] = response[1];
+		pthd[i].start_signal[0] = start_signal[0];
+		pthd[i].start_signal[1] = start_signal[1];
+		pthd[i].result_signal[0] = result_signal[0];
+		pthd[i].result_signal[1] = result_signal[1];
+		pthd[i].exit_signal[0] = exit_signal[0];
+		pthd[i].exit_signal[1] = exit_signal[1];
+		pthd[i].enough = enough;
+		pthd[i].iterations = iterations;
+		pthd[i].parallel = parallel;
+		pthd[i].repetitions = repetitions;
+		pthd[i].cookie = cookie;
+		
+		pids[i] = clone(thread_function, pthd[i].stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, &(pthd[i]));
+		if(pids[i]<0)
+			free(pthd);
+#else
 		switch(pids[i] = fork()) {
 		case -1:
 			/* could not open enough children! */
@@ -260,6 +341,7 @@
 		default:
 			break;
 		}
+#endif
 	}
 	close(response[1]);
 	close(start_signal[0]);
@@ -316,6 +398,9 @@
 	}
 
 	if (pids) free(pids);
+#ifdef __NOMMU__
+	if (pthd) free(pthd);
+#endif
 #ifdef _DEBUG
 	fprintf(stderr, "benchmp(0x%x, 0x%x, 0x%x, %d, %d, 0x%x): exiting\n", (unsigned int)initialize, (unsigned int)benchmark, (unsigned int)cleanup, enough, parallel, (unsigned int)cookie);
 #endif
diff -urN lmbench-3.0-a9.bak/src/lmdd.c lmbench-3.0-a9/src/lmdd.c
--- lmbench-3.0-a9.bak/src/lmdd.c	2012-02-06 17:28:31.070046937 +0800
+++ lmbench-3.0-a9/src/lmdd.c	2012-02-06 17:43:02.546045403 +0800
@@ -477,7 +477,11 @@
 				if (pid) {
 					waitpid(pid, 0, 0);
 				}
+#ifdef __NOMMU__
+				if ((pid = vfork())) {
+#else
 				if ((pid = fork())) {
+#endif
 					off += moved;
 					int_count += (moved >> 2);
 					continue;
diff -urN lmbench-3.0-a9.bak/src/lmhttp.c lmbench-3.0-a9/src/lmhttp.c
--- lmbench-3.0-a9.bak/src/lmhttp.c	2012-02-06 17:28:31.098045378 +0800
+++ lmbench-3.0-a9/src/lmhttp.c	2012-02-06 17:43:02.546045403 +0800
@@ -89,9 +89,17 @@
 	signal(SIGHUP, die);
 	signal(SIGTERM, die);
 	for (i = 1; i < fflg; ++i) {
+#ifdef __NOMMU__
+		if (vfork() <= 0) {
+			handle_scheduler(i, 0, 0);
+			worker();
+			_exit(0);
+		}
+#else
 		if (fork() <= 0) {
 			break;
 		}
+#endif
 	}
 	handle_scheduler(i, 0, 0);
 	worker();
diff -urN lmbench-3.0-a9.bak/src/memsize.c lmbench-3.0-a9/src/memsize.c
--- lmbench-3.0-a9.bak/src/memsize.c	2012-02-06 17:28:31.110045898 +0800
+++ lmbench-3.0-a9/src/memsize.c	2012-02-06 17:43:02.546045403 +0800
@@ -133,14 +133,22 @@
 		free(p);
 		return 1;
 	}
+#ifdef __NOMMU__
+	if (vfork() == 0) {
+#else
 	if (fork() == 0) {
+#endif
 		close(fid[0]);
 		p = malloc(size);
 		result = (p ? 1 : 0);
 		write(fid[1], &result, sizeof(int));
 		close(fid[1]);
 		if (p) free(p);
+#ifdef __NOMMU__
+		_exit(0);
+#else
 		exit(0);
+#endif
 	}
 	close(fid[1]);
 	if (read(fid[0], &result, sizeof(int)) != sizeof(int))
diff -urN lmbench-3.0-a9.bak/src/rhttp.c lmbench-3.0-a9/src/rhttp.c
--- lmbench-3.0-a9.bak/src/rhttp.c	2012-02-06 17:28:31.126045548 +0800
+++ lmbench-3.0-a9/src/rhttp.c	2012-02-06 17:43:02.546045403 +0800
@@ -75,7 +75,11 @@
 			printf("%s ", args[j]);
 		}
 		printf("\n");
+#ifdef __NOMMU__
+		if (vfork() == 0) {
+#else
 		if (fork() == 0) {
+#endif
 			char	name[30];
 
 			sprintf(name, "/tmp/rhttp%d", i);
@@ -84,7 +88,11 @@
 			dup(1);
 			execvp(args[0], args);
 			perror(args[0]);
+#ifdef __NOMMU__
+			_exit(1);
+#else
 			exit(1);
+#endif
 		}
 	}
 	for (i = 1; i < ac; ++i) {
